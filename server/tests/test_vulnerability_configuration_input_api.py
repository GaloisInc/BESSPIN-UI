from helpers import (
    BesspinTestApiBaseClass,
    create_featureModel,
    create_workflow,
    create_vulnerabilityConfig,
    DEFAULT_HEADERS,
    load_test_fmjson,
)
import json
from datetime import datetime
from uuid import uuid4

from app.models import (
    db,
    Workflow,
    VulnerabilityConfigurationInput,
)


class TestVulnerabilityConfigurationInputApi(BesspinTestApiBaseClass):
    BASE_ENDPOINT = '/api/vulnerability-config-input'

    def setUp(self):
        super(TestVulnerabilityConfigurationInputApi, self).setUp()
        self.sample_vulnClass = [*(self.app.config['VALID_VULN_CLASSES'])][0]
        self.sample_workflow = create_workflow(label='basic wf')

    def test_create(self):
        r = VulnerabilityConfigurationInput().query.all()
        self.assertListEqual(r, [])

        label = f'created vulnerability-config-input {datetime.utcnow()}'
        response = self.client.post(
            self.BASE_ENDPOINT,
            headers=DEFAULT_HEADERS,
            data=json.dumps(dict(
                label=label,
                vulnClass=self.sample_vulnClass,
                workflowId=self.sample_workflow.workflowId,
            )))

        self.assertEqual(response.status_code, 200)
        created_vulnconfig = VulnerabilityConfigurationInput.query.filter_by(label=label).first()
        self.assertIsNotNone(created_vulnconfig)

    def test_create_with_nonexistent_workflow(self):
        nonexistent_workflow_id = 2
        self.assertIsNone(Workflow.query.get(nonexistent_workflow_id))
        response = self.client.post(
            self.BASE_ENDPOINT,
            headers=DEFAULT_HEADERS,
            data=json.dumps(dict(
                workflowId=nonexistent_workflow_id,
                label='VULN CONFIG w/ NONEXISTENT WORKFLOW',
                vulnClass='BOF'
            ))
        )
        self.assertEqual(response.status_code, 400)
        self.assertEqual(response.get_json(), {
            'message': 'Unable to find given workflow',
            'workflowId': nonexistent_workflow_id,
        })

    def test_update(self):
        test_feat_model_uid = str(uuid4())
        fm = create_featureModel(uid=test_feat_model_uid)

        self.assertIsNotNone(fm.uid)
        self.assertIsNone(fm.updatedAt)

        vc = VulnerabilityConfigurationInput().query.all()
        self.assertListEqual(vc, [])
        vc = create_vulnerabilityConfig(
            label='vc1',
            featureModelUid=fm.uid,
            vulnClass=self.sample_vulnClass,
            workflowId=self.sample_workflow.workflowId,
        )

        self.assertEqual(len(VulnerabilityConfigurationInput().query.all()), 1)

        label = f'{vc.label}-{datetime.now()}'
        response = self.client.put(
            f'{self.BASE_ENDPOINT}/{vc.vulnConfigId}',
            headers=DEFAULT_HEADERS,
            data=json.dumps(dict(
                vulnConfigId=vc.vulnConfigId,
                label=label,
                vulnClass=self.sample_vulnClass,
                featureModelUid=vc.featureModelUid,
                workflowId=self.sample_workflow.workflowId,
            )))

        self.assertEqual(response.status_code, 200)
        updated_vulnconfig = VulnerabilityConfigurationInput.query.filter_by(label=label).first()
        self.assertIsNotNone(updated_vulnconfig)
        self.assertEqual(updated_vulnconfig.label, label)
        self.assertNotEqual(updated_vulnconfig.updatedAt, db.null())

    def test_update_nonexistent_vuln_config(self):
        self.assertIsNone(VulnerabilityConfigurationInput.query.get(1))
        response = self.client.put(
            f'{self.BASE_ENDPOINT}/1',
            headers=DEFAULT_HEADERS,
            data=json.dumps(dict(
                vulnConfigId=1,
                workflowId=1,
                label='NONEXISTENT VULN CONFIG',
                vulnClass='BOF',
            ))
        )
        self.assertEqual(response.status_code, 404)

    def test_try_to_update_to_new_workflow(self):
        wf = create_workflow(label='ANOTHER WORKFLOW')
        self.assertIsNotNone(wf)
        self.assertNotEqual(wf.workflowId, self.sample_workflow.workflowId)
        vc = create_vulnerabilityConfig(
            workflowId=self.sample_workflow.workflowId,
            label='VULN CONFIG FOR WF 1',
            vulnClass=self.sample_vulnClass,
            featureModelUid='SOME-UID'
        )
        self.assertIsNotNone(vc)

        response = self.client.put(
            f'{self.BASE_ENDPOINT}/{vc.vulnConfigId}',
            headers=DEFAULT_HEADERS,
            data=json.dumps(dict(
                vulnConfigId=vc.vulnConfigId,
                label=vc.label,
                workflowId=wf.workflowId,
                vulnClass=vc.vulnClass,
                featureModelUid=vc.featureModelUid
            ))
        )
        self.assertEqual(response.status_code, 400)
        self.assertEqual(response.get_json(), {
            'message': 'Cannot change workflow association'
        })

    def test_get(self):
        # add system-config-inputs
        vc = VulnerabilityConfigurationInput().query.all()
        self.assertListEqual(vc, [])
        vc1 = create_vulnerabilityConfig(
            label='vc1',
            featureModelUid=str(uuid4()),
            vulnClass=self.sample_vulnClass,
            workflowId=self.sample_workflow.workflowId
        )
        wf2 = create_workflow(label='wf2')
        vc2 = create_vulnerabilityConfig(
            label='vc2',
            featureModelUid=str(uuid4()),
            vulnClass=self.sample_vulnClass,
            workflowId=wf2.workflowId,
        )
        r = VulnerabilityConfigurationInput().query.all()
        self.assertEqual(len(r), 2)

        # get them individually
        response = self.client.get(f'{self.BASE_ENDPOINT}/{vc1.vulnConfigId}')
        self.assertEqual(response.status_code, 200)
        json_response = json.loads(response.get_data(as_text=True))
        self.assertEqual(json_response['label'], 'vc1')
        response = self.client.get(f'{self.BASE_ENDPOINT}/{vc2.vulnConfigId}')
        self.assertEqual(response.status_code, 200)
        json_response = json.loads(response.get_data(as_text=True))
        self.assertEqual(json_response['label'], 'vc2')

        # get them all
        response = self.client.get(self.BASE_ENDPOINT)
        self.assertEqual(response.status_code, 200)
        json_response = json.loads(response.get_data(as_text=True))
        self.assertEqual(len(json_response), 2)

    def test_get_nonexistent_vuln_config(self):
        self.assertIsNone(VulnerabilityConfigurationInput.query.get(1))
        response = self.client.get(f'{self.BASE_ENDPOINT}/1')
        self.assertEqual(response.status_code, 404)

    def test_get_feat_model(self):
        test_uid = 'TEST_UID'
        test_filename = 'test.fm.json'
        test_conftree = load_test_fmjson()

        fm = create_featureModel(
            uid=test_uid,
            filename=test_filename,
            source=test_conftree,
            conftree=json.loads(test_conftree)
        )
        vc = create_vulnerabilityConfig(
            label='TEST VULN CONFIG',
            featureModelUid=test_uid,
            workflowId=1,
            vulnClass='BOF'
        )

        response = self.client.get(f'{self.BASE_ENDPOINT}/{vc.vulnConfigId}/feature-model')
        self.assertEqual(response.status_code, 200)
        json_response = json.loads(response.get_data(as_text=True))
        self.assertEqual(json_response['uid'], fm.uid)

    def test_get_feat_model_for_nonexistent_vuln_config(self):
        self.assertIsNone(VulnerabilityConfigurationInput.query.get(2))
        response = self.client.get(f'{self.BASE_ENDPOINT}/2/feature-model')
        self.assertEqual(response.status_code, 404)
