from helpers import BesspinTestApiBaseClass, DEFAULT_HEADERS
import json
from datetime import datetime
from uuid import uuid4

from app.models import (
    db,
    VulnerabilityConfigurationInput,
    FeatureModel,
    Workflow,
)


class TestVulnerabilityConfigurationInputApi(BesspinTestApiBaseClass):

    def setup_workflow(self, db_conn, label):
        wf = Workflow(label=label)
        db_conn.add(wf)
        db_conn.commit()

        return wf

    def setUp(self):
        super(TestVulnerabilityConfigurationInputApi, self).setUp()
        self.sample_vulnClass = [*(self.app.config['VALID_VULN_CLASSES'])][0]
        self.sample_workflow = self.setup_workflow(db.session, 'basic wf')

    def test_create(self):
        r = VulnerabilityConfigurationInput().query.all()
        self.assertListEqual(r, [])

        label = f'created vulnerability-config-input {datetime.utcnow()}'
        response = self.client.post(
            '/api/vulnerability-config-input',
            headers=DEFAULT_HEADERS,
            data=json.dumps(dict(
                label=label,
                vulnClass=self.sample_vulnClass,
                workflowId=self.sample_workflow.workflowId,
            )))

        self.assertEqual(response.status_code, 200)
        created_vulnconfig = VulnerabilityConfigurationInput.query.filter_by(label=label).first()
        self.assertIsNotNone(created_vulnconfig)

    def test_update(self):
        test_feat_model_uid = str(uuid4())
        fm = FeatureModel(uid=test_feat_model_uid)

        db.session.add(fm)
        db.session.commit()

        self.assertIsNotNone(fm.uid)
        self.assertIsNone(fm.updatedAt)

        vc = VulnerabilityConfigurationInput().query.all()
        self.assertListEqual(vc, [])
        vc = VulnerabilityConfigurationInput(
            label='vc1',
            featureModelUid=fm.uid,
            vulnClass=self.sample_vulnClass,
            workflowId=self.sample_workflow.workflowId,
        )
        db.session.add(vc)
        db.session.commit()

        self.assertEqual(len(VulnerabilityConfigurationInput().query.all()), 1)

        label = f'{vc.label}-{datetime.now()}'
        response = self.client.put(
            f'/api/vulnerability-config-input/{vc.vulnConfigId}',
            headers=DEFAULT_HEADERS,
            data=json.dumps(dict(
                vulnConfigId=vc.vulnConfigId,
                label=label,
                vulnClass=self.sample_vulnClass,
                featureModelUid=vc.featureModelUid,
                workflowId=self.sample_workflow.workflowId,
            )))

        self.assertEqual(response.status_code, 200)
        updated_vulnconfig = VulnerabilityConfigurationInput.query.filter_by(label=label).first()
        self.assertIsNotNone(updated_vulnconfig)
        self.assertEqual(updated_vulnconfig.label, label)
        self.assertNotEqual(updated_vulnconfig.updatedAt, db.null())

    def test_get(self):
        # add system-config-inputs
        vc = VulnerabilityConfigurationInput().query.all()
        self.assertListEqual(vc, [])
        vc1 = VulnerabilityConfigurationInput(
            label='vc1',
            featureModelUid=str(uuid4()),
            vulnClass=self.sample_vulnClass,
            workflowId=self.sample_workflow.workflowId
        )
        wf2 = self.setup_workflow(db.session, 'wf2')
        vc2 = VulnerabilityConfigurationInput(
            label='vc2',
            featureModelUid=str(uuid4()),
            vulnClass=self.sample_vulnClass,
            workflowId=wf2.workflowId,
        )
        db.session.add_all([vc1, vc2])
        db.session.commit()
        r = VulnerabilityConfigurationInput().query.all()
        self.assertEqual(len(r), 2)

        # get them individually
        response = self.client.get(f'/api/vulnerability-config-input/{vc1.vulnConfigId}')
        self.assertEqual(response.status_code, 200)
        json_response = json.loads(response.get_data(as_text=True))
        self.assertEqual(json_response['label'], 'vc1')
        response = self.client.get(f'/api/vulnerability-config-input/{vc2.vulnConfigId}')
        self.assertEqual(response.status_code, 200)
        json_response = json.loads(response.get_data(as_text=True))
        self.assertEqual(json_response['label'], 'vc2')

        # get them all
        response = self.client.get('/api/vulnerability-config-input')
        self.assertEqual(response.status_code, 200)
        json_response = json.loads(response.get_data(as_text=True))
        self.assertEqual(len(json_response), 2)
