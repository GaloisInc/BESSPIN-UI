import unittest
from uuid import uuid4

from app import create_app
from app.models import (
    db,
    FeatureModel,
    VulnerabilityConfigurationInput,
)


class VulnerabilityConfigurationInputModelTestCase(unittest.TestCase):

    def setUp(self):
        self.app = create_app('test')
        self.app_context = self.app.app_context()
        self.app_context.push()
        db.create_all()
        self.test_vulnClass = self.app.config['VALID_VULN_CLASSES'][0]

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.app_context.pop()

    def test_minimum_viable_record(self):
        test_uid = str(uuid4())
        feature_model = FeatureModel(uid=test_uid)

        db.session.add(feature_model)
        db.session.commit()

        db.session.add(
            VulnerabilityConfigurationInput(
                vulnClass=self.test_vulnClass,
                featureModelUid=feature_model.uid,
                workflowId=1,
            )
        )

        self.assertEqual(len(VulnerabilityConfigurationInput.query.all()), 1)

        vuln_config_input = VulnerabilityConfigurationInput.query.filter_by(featureModelUid=test_uid).first()

        self.assertIsNotNone(vuln_config_input)
        self.assertEqual(vuln_config_input.featureModel.uid, test_uid)
