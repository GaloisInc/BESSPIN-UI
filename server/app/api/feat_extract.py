import os
import stat
import pwd
import subprocess
from shlex import quote
import tempfile

import json
import base64
from flask import current_app, request
from flask_restplus import abort, Resource, fields

from config import config
from app.models import (
    db,
    FeatExtract,
)
from app.lib.toolsuite_utils import (
    get_config_feat_extract_template,
    get_variable,
    get_prebuilt_piccolo
)
from app.lib.configurator_shim import (
    fmjson_to_clafer
)
from . import api
from app.lib.nix import run_nix_subprocess

ns = api.namespace(
    'feat-extract',
    description='Operations on feat extract'
)

"""
    Define a swagger model that can be used for:
    - defining expected shape of inputs/outputs to the api
    - autogenerate swagger documentation for the structure of api data
"""

feat_extract_list_elem = api.model('FeatExtractListElem', {
    'label': fields.String(
        required=False,
        description='Label of feat extract record'),
    'featExtractId': fields.Integer(
        required=True,
        description='Id of feat extract record'),
})

feat_extract_list = api.model('FeatExtractList', {
    'featExtractIdList': fields.List(fields.Nested(feat_extract_list_elem, skip_none=True)),
})

feat_extract_new_input = api.model('FeatExtractNewInput', {
    'label': fields.String(
        required=False,
    ),
})

feat_extract_record = api.model('FeatExtract', {
    'label': fields.String(
        required=False,
        description='Id of feat extract record'),
    'featExtractId': fields.Integer(
        required=True,
        description='Id of feat extract record'),
    'featExtractInput': fields.String(
        required=True,
        description='Text of the feat-extract config',
    ),
    'featExtractOutputFilename': fields.String(
        required=False,
    ),
    'featExtractOutputContent': fields.String(
        required=False,
        description='content of the feature model generated by feat-extract'
    ),
    'featExtractOutputContentClafer': fields.String(
        required=False,
        description='content of the feature model generated by feat-extract in clafer format'
    ),
    'featExtractOutputFilenameSimplified': fields.String(
        required=False,
    ),
    'featExtractOutputContentSimplified': fields.String(
        required=False,
        description='content of the simplified feature model'
    ),
    'featExtractOutputContentClaferSimplified': fields.String(
        required=False,
        description='content of the simplified feature model in clafer format'
    ),
})


feat_extract_input = api.model('FeatExtractInput', {
    'featExtractInput': fields.String(
        reuired=True,
        description='Text of the feat-extract config',
    )
})


@ns.route('/list')
class FeatExtractListApi(Resource):
    @ns.marshal_list_with(feat_extract_list)
    def get(self):
        current_app.logger.debug(f'list all feat extract entries')
        feat_extract_all = FeatExtract.query.all()

        res = [{ 'featExtractId': e.featExtractId, 'label': e.label} for e in feat_extract_all]

        current_app.logger.debug(f'list is {str(res)}')
        return { 'featExtractIdList': res }


@ns.route('/fetch/<string:featExtractId>')
class FeatExtractFetchApi(Resource):
    @ns.marshal_list_with(feat_extract_record, skip_none=True)
    def get(self, featExtractId):
        current_app.logger.debug(f'fetching an feat extract entry')
        existing_feat_extract = FeatExtract.query.get_or_404(int(featExtractId))

        return existing_feat_extract


@ns.route('/new/<string:cpu>/<string:preBuilt>')
class FeatExtractNewApi(Resource):
    @ns.expect(feat_extract_new_input)
    @ns.marshal_list_with(feat_extract_record)
    def post(self, cpu, preBuilt):
        current_app.logger.debug(f'create new feat extract entry: {preBuilt}')
        data = json.loads(request.data)
        current_app.logger.debug(f'New data: {str(data)}')

        feat_extract_config = get_config_feat_extract_template(cpu)

        new_feat_extract = FeatExtract(
            label=data['label'],
            featExtractInput=feat_extract_config,
        )

        if not (preBuilt == 'preBuilt' or preBuilt == 'notPreBuilt'):
            return abort(404, f'Unable to find specified resource with last parameter as: {preBuilt}')

        if preBuilt == 'preBuilt':
            filename, feature_model = get_prebuilt_piccolo()
            new_feat_extract.featExtractOutputFilename = filename.strip('.fm.json')
            new_feat_extract.featExtractOutputContent = feature_model
            new_feat_extract.featExtractOutputContentClafer = fmjson_to_clafer(feature_model.encode('utf8'))
            new_feat_extract.featExtractOutputFilenameSimplified = filename.strip('.fm.json')
            new_feat_extract.featExtractOutputContentSimplified = feature_model
            new_feat_extract.featExtractOutputContentClaferSimplified = fmjson_to_clafer(feature_model.encode('utf8'))

        db.session.add(new_feat_extract)
        db.session.commit()

        return new_feat_extract

@ns.route('/submit/<string:featExtractId>')
class FeatExtractSubmitApi(Resource):
    @ns.expect(feat_extract_input)
    def post(self, featExtractId):
        current_app.logger.debug(f'submit feat extract entry')
        data = json.loads(request.data)
        current_app.logger.debug(f'Submit data: {str(data)}')

        existing_feat_extract = FeatExtract.query.get_or_404(int(featExtractId))

        existing_feat_extract.featExtractInput = data['featExtractInput']
        db.session.add(existing_feat_extract)
        db.session.commit()

        return

@ns.route('/run/<string:featExtractId>')
class FeatExtractRunApi(Resource):
    @ns.marshal_list_with(feat_extract_record)
    def post(self, featExtractId):
        current_app.logger.debug(f'run feat extract entry')

        if config['default'].USE_TOOLSUITE:
            if os.environ.get('BESSPIN_CONFIGURATOR_USE_TEMP_DIR'):
                WORK_DIR_OBJ = tempfile.TemporaryDirectory()
                WORK_DIR = WORK_DIR_OBJ.name
            else:
                WORK_DIR = tempfile.gettempdir()

            feat_extract_config_file_path = os.path.join(WORK_DIR, 'feat_extract_config_file.toml')

            existing_feat_extract = FeatExtract.query.get_or_404(int(featExtractId))

            with open(feat_extract_config_file_path, 'w') as f:
                f.write(existing_feat_extract.featExtractInput)

            cp = run_nix_subprocess('~/tool-suite', f'besspin-feature-extract {feat_extract_config_file_path} synthesize')
            current_app.logger.debug('besspin-feature-extract stdout: ' + str(cp.stdout.decode('utf8')))
            current_app.logger.debug('besspin-feature-extract stderr: ' + str(cp.stderr.decode('utf8')))
            log_output = str(cp.stdout.decode('utf8'))

            output_filename = get_variable(existing_feat_extract.featExtractInput, 'out-file')
            output_file_path = os.path.join('/home/besspinuser/tool-suite', output_filename)
            with open(output_file_path, 'r') as f:
                output_file_content = f.read()

            existing_feat_extract.featExtractOutputFilename = output_filename.strip('.fm.json')
            existing_feat_extract.featExtractOutputContent = output_file_content
            existing_feat_extract.featExtractOutputContentClafer = fmjson_to_clafer(output_file_content.encode('utf-8'))

            db.session.add(existing_feat_extract)
            db.session.commit()

            return existing_feat_extract
        return

@ns.route('/simplify/<string:featExtractId>')
class FeatExtractSimplifyApi(Resource):
    @ns.marshal_list_with(feat_extract_record)
    def get(self, featExtractId):
        current_app.logger.debug(f'convert dot feat extract entry: {featExtractId}')

        existing_feat_extract = FeatExtract.query.get_or_404(int(featExtractId))

        if os.environ.get('BESSPIN_CONFIGURATOR_USE_TEMP_DIR'):
            WORK_DIR_OBJ = tempfile.TemporaryDirectory()
            WORK_DIR = WORK_DIR_OBJ.name
        else:
            WORK_DIR = tempfile.gettempdir()

        tmp_input_file = os.path.join(WORK_DIR, existing_feat_extract.featExtractOutputFilename)
        with open(tmp_input_file, 'w') as f:
            f.write(existing_feat_extract.featExtractOutputContent)

        tmp_output_file = os.path.join(WORK_DIR, 'simplified.fm.json')
        cmd = f'besspin-feature-model-tool simplify {tmp_input_file} > {tmp_output_file}'
        current_app.logger.debug(f'command to execute: {cmd}')
        cp = run_nix_subprocess('~/tool-suite', cmd)
        current_app.logger.debug('simplify stdout: ' + str(cp.stdout.decode('utf8')))
        current_app.logger.debug('simplify stderr: ' + str(cp.stderr.decode('utf8')))

        with open(tmp_output_file, 'r') as f:
            output_file_content = f.read()

        existing_feat_extract.featExtractOutputFilenameSimplified = existing_feat_extract.featExtractOutputFilename + '-simpl'
        existing_feat_extract.featExtractOutputContentSimplified = output_file_content
        existing_feat_extract.featExtractOutputContentClaferSimplified = fmjson_to_clafer(output_file_content.encode('utf-8'))

        db.session.add(existing_feat_extract)
        db.session.commit()

        return existing_feat_extract

