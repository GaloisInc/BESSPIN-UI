import React, { useState, useEffect } from 'react';
import {
    useParams
  } from "react-router-dom";
import { connect } from 'react-redux';
import {
    Alert,
    ButtonGroup,
    Button,
    Container,
    Modal,
    Row,
    Col,
} from 'react-bootstrap';

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faUndo, faRedo } from '@fortawesome/free-solid-svg-icons';
import AceEditor from 'react-ace';
import 'ace-builds/src-noconflict/theme-monokai';
import 'ace-builds/src-noconflict/mode-json';

import { IState } from '../state';
import {
    fetchSystemByVulnConfig,
    getSystem,
    submitVulnerabilityClass,
    submitValidateConfiguration,
    selectFeature,
    selectFeatureUndo,
    selectFeatureRedo,
    IFeatureModelRecord,
} from '../state/feature-model';

import { LoadingIndicator } from '../components/LoadingIndicator';

import { Header } from '../components/Header';
import { Graph } from '../components/Graph';
import '../style/Vulnerability.scss';


interface IVulnSelectorProps {
    onSelect: (_:string) => void;

}

const VulnSelector: React.FC<IVulnSelectorProps> = ({onSelect}) => {
    return (
        <Modal className='LoadingIndicator' show={ true } size='sm' aria-labelledby='contained-modal-title-vcenter' centered>
            <Modal.Body>
                <select onChange={(evt) => onSelect(evt.target.value)}>
                    <option>Please select a vuln class</option>
                    <option>BOF</option>
                    <option>PPAC</option>
                    <option>NUMERIC</option>
                    <option>IEX</option>
                    <option>RESOURCE_MANAGEMENT</option>
                </select>
            </Modal.Body>
        </Modal>
    );
};

export interface IConfigureVulnProps {
    system: IFeatureModelRecord;
}

interface IDispatchFromProps {
    fetchSystemByVulnConfig: typeof fetchSystemByVulnConfig;
    submitVulnerabilityClass: typeof submitVulnerabilityClass;
    selectFeature: typeof selectFeature;
    selectFeatureUndo: typeof selectFeatureUndo;
    selectFeatureRedo: typeof selectFeatureRedo;
    submitValidateConfiguration: typeof submitValidateConfiguration;
}

export type IVulnerabilityConfigInputProps  = IConfigureVulnProps & IDispatchFromProps;

export const Vulnerability: React.FC<IVulnerabilityConfigInputProps> = ({
    fetchSystemByVulnConfig,
    submitVulnerabilityClass,
    selectFeature,
    selectFeatureUndo,
    selectFeatureRedo,
    submitValidateConfiguration,
    system,
}) => {

    const { workflowId, testId } = useParams();
    const [isLoading, setIsLoading] = useState(false);
    const [errorMessage, setErrorMessage] = useState('');

    const createVulnRec = (vulnClass: string): void => {
        setIsLoading(true);
        setErrorMessage('');
        workflowId && submitVulnerabilityClass(workflowId, vulnClass);
        setIsLoading(false);
    };

    useEffect(() => {
        if (testId) {
            fetchSystemByVulnConfig(Number(testId));
        }
    }, [testId, fetchSystemByVulnConfig]);

    return (
        <Container className='VulnerabilityClass'>
            <Header />
            <h1>Vulnerability Configuration</h1>
            { errorMessage ? <Alert>{ errorMessage }</Alert> : null }
            { isLoading ? <LoadingIndicator /> : null }
            { (testId || system.uid) ? null : <VulnSelector onSelect={ createVulnRec } /> }
            <ButtonGroup className="mr-2" aria-label="First group">
                <Button
                    className="btn-light btn-outline-secondary"
                    onClick={ () => {
                        selectFeatureUndo();
                    } }
                >
                    <FontAwesomeIcon icon={faUndo} />
                    Undo
                </Button>
                <Button
                    className="btn-light btn-outline-secondary"
                    onClick={ () => {
                        selectFeatureRedo();
                    } }
                >
                    Redo
                    <FontAwesomeIcon icon={faRedo} />
                </Button>
            </ButtonGroup>
            <Button
                    className="btn btn-primary"
                    onClick={ () => { submitValidateConfiguration(system.uid, system.configs) } }
            >
                    Validate
            </Button>
            <Graph
                system={ system }
                selectFeature={ selectFeature }
            />
            <Container>
                <Row>
                    <Col>
                        <AceEditor
                            mode='json'
                            theme='monokai'
                            name='editor-source'
                            value={ system && system.source ? system.source : '' }
                            readOnly={ true }
                            setOptions={{ useWorker: false }}
                        />
                    </Col>
                    <Col>
                        <AceEditor
                            mode='json'
                            theme='monokai'
                            name='editor-configs'
                            value={ system ? system.configsPP : '' }
                            readOnly={ true }
                            setOptions={{ useWorker: false }}
                        />
                    </Col>
                </Row>
            </Container>
        </Container>
    );
};

const mapStateToProps = (state: IState, props: IConfigureVulnProps): IConfigureVulnProps => {
    const system = getSystem(state);

    return {
        ...props,

        system: system,
    };
};

//const mapDispatchToProps = (dispatch: Dispatch): IDispatchFromProps => ({
const mapDispatchToProps = {
    fetchSystemByVulnConfig,
    submitVulnerabilityClass,
    selectFeature,
    selectFeatureUndo,
    selectFeatureRedo,
    submitValidateConfiguration,
};

export const ConnectedVulnerability = connect(mapStateToProps, mapDispatchToProps)(Vulnerability);

