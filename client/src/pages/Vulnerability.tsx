import React, { useState } from 'react';
import { connect } from 'react-redux';

import {
    Alert,
    ButtonGroup,
    Button,
    Container,
    Modal,
    Row,
} from 'react-bootstrap';

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faUndo, faRedo } from '@fortawesome/free-solid-svg-icons';
import AceEditor from 'react-ace';
import 'ace-builds/src-noconflict/theme-monokai';
import 'ace-builds/src-noconflict/mode-json';
import {
    submitValidateConfiguration,
    selectFeature,
    selectFeatureUndo,
    selectFeatureRedo,
} from '../state/feature-model';

import { LoadingIndicator } from '../components/LoadingIndicator';
import { Graph } from '../components/Graph';

const VulnSelector: React.FC = ({onSelect}) => {
    return (
        <Modal className='LoadingIndicator' show={ true } size='sm' aria-labelledby='contained-modal-title-vcenter' centered>
            <Modal.Body>
                <select onChange={(evt) => onSelect(evt.target.value)}>
                    <option>....</option>
                </select>
            </Modal.Body>
        </Modal>
    );
};

export const Vulnerability: React.FC = ({
    selectFeature,
    selectFeatureUndo,
    selectFeatureRedo,
    submitValidateConfiguration,
}) => {

    const [vulnRec, setVulnRec] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [errorMessage, setErrorMessage] = useState('')

    const createVulnRec = (vulnClass: string): void => {
        setIsLoading(true)
        setErrorMessage('');
        xhr.post(`/api/create/test${vulnClass}`)
            .then((record) => {
                setIsLoading(false);
                setVulnRec(record);
            })
            .catch((error) => setErrorMessage('oh shit'));
    };

    return (
        <React.Fragment>
            { errorMessage ? <Alert>{ errorMessage }</Alert> : null }
            { isLoading ? <LoadingIndicator /> : null }
            { vulnRec ? null : <VulnSelector onSelect={ createVulnRec } /> }
            <ButtonGroup className="mr-2" aria-label="First group">
                <Button
                    className="btn-light btn-outline-secondary"
                    onClick={ () => {
                        selectFeatureUndo();
                    } }
                >
                    <FontAwesomeIcon icon={faUndo} />
                    Undo
                </Button>
                <Button
                    className="btn-light btn-outline-secondary"
                    onClick={ () => {
                        selectFeatureRedo();
                    } }
                >
                    Redo
                    <FontAwesomeIcon icon={faRedo} />
                </Button>
            </ButtonGroup>
            <Button
                    className="btn btn-primary"
                    onClick={ () => { submitValidateConfiguration(system.uid, system.configs) } }
            >
                    Validate
            </Button>
            <Graph
                system={ vulnRec.featureModel }
                selectFeature={ selectFeature }
            />
            <Container>
                <Row>
                    <Col>
                        <AceEditor
                            mode='json'
                            theme='monokai'
                            name='editor-source'
                            value={ vulnRec.featureModel && vulnRec.featureModel.source ? vulnRec.featureModel.source : '' }
                            readOnly={ true }
                            setOptions={{ useWorker: false }}
                        />
                    </Col>
                    <Col>
                        <AceEditor
                            mode='json'
                            theme='monokai'
                            name='editor-configs'
                            value={ vulnRec.featureModel ? vulnRec.featureModel.configsPP : '' }
                            readOnly={ true }
                            setOptions={{ useWorker: false }}
                        />
                    </Col>
                </Row>
            </Container>
        </Container>
        </React.Fragment>
    );
};

const mapDispatchToProps = {
    selectFeature,
    selectFeatureUndo,
    selectFeatureRedo,
    submitValidateConfiguration,
};

export const ConnectedVulnerabilty = connect({}, mapDispatchToProps)(Vulnerability);

